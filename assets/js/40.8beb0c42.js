(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{313:function(t,a,s){"use strict";s.r(a);var n=s(10),r=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"神经网络基础"}},[t._v("神经网络基础")]),t._v(" "),s("h2",{attrs:{id:"学习目标"}},[t._v("学习目标")]),t._v(" "),s("ul",[s("li",[t._v("目标\n"),s("ul",[s("li",[t._v("了解感知机结构、作用以及优缺点")]),t._v(" "),s("li",[t._v("了解tensorflow playground的使用")]),t._v(" "),s("li",[t._v("说明感知机与神经网络的联系")]),t._v(" "),s("li",[t._v("说明神经网络的组成")])])]),t._v(" "),s("li",[t._v("应用\n"),s("ul",[s("li",[t._v("无")])])])]),t._v(" "),s("h2",{attrs:{id:"神经网络"}},[t._v("神经网络")]),t._v(" "),s("p",[s("strong",[t._v("人工神经网络（ Artificial Neural Network， 简写为ANN）也简称为神经网络（NN）")]),t._v("。是一种模仿生物神经网络（动物的中枢神经系统，特别是大脑）结构和功能的 "),s("strong",[t._v("计算模型")]),t._v("。经典的神经网络结构包含三个层次的神经网络。"),s("strong",[t._v("分别输入层，输出层以及隐藏层。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84.png",alt:"网络结构"}})]),t._v(" "),s("p",[s("strong",[t._v("其中每层的圆圈代表一个神经元，隐藏层和输出层的神经元有输入的数据计算后输出，输入层的神经元只是输入。")])]),t._v(" "),s("ul",[s("li",[t._v("神经网络的特点\n"),s("ul",[s("li",[t._v("每个连接都有个权值")]),t._v(" "),s("li",[t._v("同一层神经元之间没有连接")]),t._v(" "),s("li",[t._v("最后的输出结果对应的层也称之为"),s("strong",[t._v("全连接层")])])])])]),t._v(" "),s("blockquote",[s("p",[t._v("神经网络是深度学习的重要算法，用途在图像（如图像的分类、检测）和自然语言处理（如文本分类、聊天等）")])]),t._v(" "),s("p",[t._v("那么为什么设计这样的结构呢？首先从一个最基础的结构说起，神经元。以前也称之为感知机。神经元就是要模拟人的神经元结构。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E7%A5%9E%E7%BB%8F%E5%85%83.png",alt:"神经元"}})]),t._v(" "),s("blockquote",[s("p",[t._v("一个神经元通常具有多个"),s("strong",[t._v("树突")]),t._v("，主要用来接受传入信息；而"),s("strong",[t._v("轴突")]),t._v("只有一条，轴突尾端有许多轴突末梢可以给其他多个神经元传递信息。轴突末梢跟其他神经元的树突产生连接，从而传递信号。这个连接的位置在生物学上叫做“"),s("strong",[t._v("突触")]),t._v("”。")])]),t._v(" "),s("p",[t._v("要理解神经网络，其实要从感知机开始。")]),t._v(" "),s("h3",{attrs:{id:"感知机-pla-perceptron-learning-algorithm"}},[t._v("感知机(PLA: Perceptron Learning Algorithm))")]),t._v(" "),s("p",[t._v("感知机就是模拟这样的大脑神经网络处理数据的过程。感知机模型如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E6%84%9F%E7%9F%A5%E6%9C%BA.png",alt:"感知机"}})]),t._v(" "),s("p",[t._v("感知机是一种最基础的分类模型，前半部分类似于回归模型。感知机最基础是这样的函数，而逻辑回归用的sigmoid。"),s("strong",[t._v("这个感知机具有连接的权重和偏置")])]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E6%84%9F%E7%9F%A5%E6%9C%BA%E5%85%AC%E5%BC%8F.png",alt:"感知机公式"}})]),t._v(" "),s("p",[t._v("我们通过一个平台去演示，就是tensorflow playground")]),t._v(" "),s("h2",{attrs:{id:"playground使用"}},[t._v("playground使用")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/playground.png",alt:"playground"}})]),t._v(" "),s("blockquote",[s("p",[t._v("网址：http://playground.tensorflow.org")])]),t._v(" "),s("p",[t._v("那么在这整个分类过程当中，是怎么做到这样的效果那要受益于神经网络的一些特点")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E4%B8%A4%E7%B1%BB%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB.png",alt:"两类数据分类"}})]),t._v(" "),s("p",[t._v("要区分一个数据点是橙色的还是蓝色的，你该如何编写代码？也许你会像下面一样任意画一条对角线来分隔两组数据点，定义一个阈值以确定每个数据点属于哪一个组。")]),t._v(" "),s("p",[t._v("其中 b 是确定线的位置的阈值。通过分别为 x1 和 x2 赋予权重 w1 和 w2，你可以使你的代码的复用性更强。")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E7%9B%B4%E7%BA%BF%E6%96%B9%E7%A8%8B.png",alt:"直线方程"}})]),t._v(" "),s("p",[t._v("此外，如果你调整 w1 和 w2 的值，你可以按你喜欢的方式调整线的角度。你也可以调整 b 的值来移动线的位置。所以你可以重复使用这个条件来分类任何可以被一条直线分类的数据集。但问题的关键是程序员必须为 w1、w2 和 b 找到合适的值——即所谓的参数值，然后指示计算机如何分类这些数据点。")]),t._v(" "),s("h3",{attrs:{id:"playground简单两类分类结果"}},[t._v("playground简单两类分类结果")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/playground%E4%B8%A4%E7%B1%BB.png",alt:"playground两类"}})]),t._v(" "),s("h4",{attrs:{id:"但是这种结构的线性的二分类器，但不能对非线性的数据并不能进行有效的分类。"}},[t._v("但是这种结构的线性的二分类器，但不能对非线性的数据并不能进行有效的分类。")]),t._v(" "),s("blockquote",[s("p",[t._v("感知机结构，能够很好去解决与、或等问题，但是并不能很好的解决异或等问题。我们通过一张图来看，有四个样本数据")]),t._v(" "),s("p",[t._v("与问题：每个样本的两个特征同时为1，结果为1")]),t._v(" "),s("p",[t._v("或问题：每个样本的两个特征一个为1，结果为1")]),t._v(" "),s("p",[t._v("异或：每个样本的两个特征相同为0， 不同为1")]),t._v(" "),s("p",[t._v("根据上述的规则来进行划分，我们很容易建立一个线性模型")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E4%B8%8E%E6%88%96%E9%97%AE%E9%A2%98.png",alt:"与或问题"}})])]),t._v(" "),s("h4",{attrs:{id:"相当于给出这样的数据"}},[t._v("相当于给出这样的数据")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE1.png",alt:"复杂数据1"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E5%A4%8D%E6%9D%82%E6%95%B0%E6%8D%AE2.png",alt:"复杂数据2"}})]),t._v(" "),s("h3",{attrs:{id:"单神经元复杂的两类-playground演示"}},[t._v("单神经元复杂的两类-playground演示")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E5%A4%8D%E6%9D%82%E4%B8%A4%E7%B1%BB%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB1.png",alt:"复杂两类数据分类1"}})]),t._v(" "),s("h4",{attrs:{id:"那么怎么解决这种问题呢？其实我们多增加几个感知机即可解决？也就是下图这样的结构，组成一层的结构？"}},[t._v("那么怎么解决这种问题呢？其实我们多增加几个感知机即可解决？也就是下图这样的结构，组成一层的结构？")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E5%8D%95%E5%B1%82%E6%84%9F%E7%9F%A5%E6%9C%BA.png",alt:"单层感知机"}})]),t._v(" "),s("h3",{attrs:{id:"多个神经元效果演示"}},[t._v("多个神经元效果演示")]),t._v(" "),s("p",[s("img",{attrs:{src:"/img/articial/%E5%A4%8D%E6%9D%82%E4%B8%A4%E7%B1%BB%E6%95%B0%E6%8D%AE%E5%88%86%E7%B1%BB.png",alt:"复杂两类数据分类"}})]),t._v(" "),s("h2",{attrs:{id:"sequential构建简单单层神经网络模型"}},[t._v("Sequential构建简单单层神经网络模型")]),t._v(" "),s("p",[s("code",[t._v("Sequential")]),t._v("模型是层的线性堆栈。我们可以"),s("code",[t._v("Sequential")]),t._v("通过将层实例列表传递给构造函数来创建模型：")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" keras"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("models "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Sequential\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" keras"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("layers "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Dense"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Activation\n\nmodel "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sequential"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    Dense"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" input_shape"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("784")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("p",[t._v("同样可以用add方法来添加模型")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("model "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Sequential"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmodel"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("add"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dense"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" input_dim"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("784")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h3",{attrs:{id:"tensorflow构建单层神经网络代码"}},[t._v("tensorflow构建单层神经网络代码")]),t._v(" "),s("div",{staticClass:"language-python line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 2、全连接层神经网络计算")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 全连接层神经网络的计算公式：[None, 784] * [784, 10] + [10] = [None, 10]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 随机初始化权重偏置参数，这些是优化的参数，必须使用变量op去定义")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("variable_scope"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fc_model"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        weight "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Variable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random_normal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("784")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"w"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        bias "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Variable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("random_normal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# fc层的计算")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# y_predict [None, 10]输出结果，提供给softmax使用")]),t._v("\n        y_predict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("matmul"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" weight"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" bias\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])])])},[],!1,null,null,null);a.default=r.exports}}]);