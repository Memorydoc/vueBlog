(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{318:function(v,_,t){"use strict";t.r(_);var i=t(10),r=Object(i.a)({},function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"卷积神经网络-cnn-简介"}},[v._v("卷积神经网络(CNN)简介")]),v._v(" "),t("h2",{attrs:{id:"学习目标"}},[v._v("学习目标")]),v._v(" "),t("ul",[t("li",[v._v("目标\n"),t("ul",[t("li",[v._v("了解线性网络以及多层网络模型缺陷")]),v._v(" "),t("li",[v._v("知道为什么需要非线性激活函数")]),v._v(" "),t("li",[v._v("了解为什么需要卷积神经网络")])])]),v._v(" "),t("li",[v._v("应用\n"),t("ul",[t("li",[v._v("无")])])])]),v._v(" "),t("p",[t("strong",[v._v("多层的线性网络和单层的线性网络没有区别，而且线性模型的能够解决的问题也是有限的")])]),v._v(" "),t("h2",{attrs:{id:"更复杂抽象的数据"}},[v._v("更复杂抽象的数据")]),v._v(" "),t("p",[v._v("一个单隐含层有更多的神经元，就能捕捉更多的特征。而且有更多隐层，意味着能从数据集中提取更多复杂的结构。")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/%E8%9E%BA%E6%97%8B%E7%BB%93%E6%9E%84.png",alt:"螺旋结构"}})]),v._v(" "),t("ul",[t("li",[v._v("增加网络深度")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/%E7%BA%BF%E6%80%A7%E6%BC%94%E7%A4%BA%E6%95%88%E6%9E%9C.png",alt:"线性演示效果"}})]),v._v(" "),t("ul",[t("li",[v._v("使用非线性激活函数")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/relu%E5%A2%9E%E5%8A%A0%E6%B7%B1%E5%BA%A6.png",alt:"relu增加深度"}})]),v._v(" "),t("h2",{attrs:{id:"激活函数的选择"}},[v._v("激活函数的选择")]),v._v(" "),t("p",[t("strong",[v._v("涉及到网络的优化时候，会有不同的激活函数选择有一个问题是神经网络的隐藏层和输出单元用什么激活函数。之前我们都是选用 sigmoid 函数，但有时其他函数的效果会好得多，大多数通过实践得来，没有很好的解释性。")])]),v._v(" "),t("p",[v._v("可供选用的激活函数有：")]),v._v(" "),t("ul",[t("li",[v._v("tanh 函数（the hyperbolic tangent function，双曲正切函数）：")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/tanh.png",alt:""}})]),v._v(" "),t("p",[v._v("效果比 sigmoid 函数好,因为函数输出介于 -1 和 1 之间。")]),v._v(" "),t("p",[v._v("注 :tanh 函数存在和 sigmoid 函数一样的缺点：当 z 趋紧无穷大（或无穷小），导数的梯度（即函数的斜率）就趋紧于 0，这使得梯度算法的速度会减慢。")]),v._v(" "),t("ul",[t("li",[v._v("ReLU 函数（the rectified linear unit，修正线性单元）")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/relu.png",alt:""}})]),v._v(" "),t("p",[v._v("当 z > 0 时，梯度始终为 1，从而提高神经网络基于梯度算法的运算速度，收敛速度远大于 sigmoid 和 tanh。然而当 z < 0 时，梯度一直为 0，但是实际的运用中，该缺陷的影响不是很大。")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("Leaky ReLU（带泄漏的 ReLU）：")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/leakyrelu.png",alt:""}})])])]),v._v(" "),t("p",[v._v("Leaky ReLU 保证在 z < 0 的时候，梯度仍然不为 0。理论上来说，Leaky ReLU 有 ReLU 的所有优点，但在实际操作中没有证明总是好于 ReLU，因此不常用。")]),v._v(" "),t("h3",{attrs:{id:"为什么需要非线性的激活函数"}},[v._v("为什么需要非线性的激活函数")]),v._v(" "),t("p",[v._v("使用线性激活函数和不使用激活函数、直接使用 Logistic 回归没有区别，那么无论神经网络有多少层，输出都是输入的线性组合，与"),t("strong",[v._v("没有隐藏层")]),v._v("效果相当，就成了最原始的感知器了。")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0.png",alt:""}})]),v._v(" "),t("h3",{attrs:{id:"更多发展"}},[v._v("更多发展")]),v._v(" "),t("p",[v._v("更多神经元 + 更深的网络 = 更复杂的抽象。这也是简单的神经元如何变得更聪明，并在图像识别、围棋这些特定问题上表现如此之好的原因。")]),v._v(" "),t("ul",[t("li",[v._v("神经网络拓展介绍")])]),v._v(" "),t("blockquote",[t("ul",[t("li",[v._v("神经网络的种类\n"),t("ul",[t("li",[v._v("基础神经网络：线性神经网络，BP神经网络，Hopfield神经网络等")]),v._v(" "),t("li",[v._v("进阶神经网络：玻尔兹曼机，受限玻尔兹曼机，递归神经网络等")]),v._v(" "),t("li",[v._v("深度神经网络：深度置信网络，"),t("strong",[v._v("卷积神经网络")]),v._v("，循环神经网络，LSTM网络等")])])])])]),v._v(" "),t("h2",{attrs:{id:"为什么需要卷积神经网络"}},[v._v("为什么需要卷积神经网络")]),v._v(" "),t("h4",{attrs:{id:"图像特征数量对神经网络效果压力"}},[v._v("图像特征数量对神经网络效果压力")]),v._v(" "),t("p",[v._v("假设下图是一图片大小为28 * 28 的黑白图片时候，每一个像素点只有一个值（单通道）。那么总的数值个数为 784个特征。")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/%E9%BB%91%E8%89%B2%E5%9B%BE%E7%89%87.png",alt:""}})]),v._v(" "),t("p",[v._v("那现在这张图片是彩色的，那么彩色图片由RGB三通道组成，也就意味着总的数值有28 * 28 * 3 = 2352个值。")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/%E5%BD%A9%E8%89%B2%E5%9B%BE%E7%89%87.png",alt:""}})]),v._v(" "),t("p",[v._v("从上面我们得到一张图片的输入是2352个特征值，即神经网路当中与若干个神经元连接，假设第一个隐层是10个神经元，那么也就是23520个权重参数。")]),v._v(" "),t("p",[t("strong",[v._v("如果图片再大一些呢，假设图片为1000 * 1000 * 3，那么总共有3百万数值，同样接入10个神经元，那么就是3千万个权重参数。这样的参数大小，神经网络参数更新需要大量的计算不说，也很难达到更好的效果，大家就不倾向于使用多层神经网络了。")])]),v._v(" "),t("p",[v._v("所以就有了卷积神经网络的流行，那么卷积神经网络为什么大家会选择它。那么先来介绍感受野以及边缘检测的概念。")]),v._v(" "),t("p",[v._v("在"),t("strong",[v._v("计算机视觉")]),v._v("领域，通常要做的就是指用机器程序替代人眼对目标图像进行识别等。"),t("strong",[v._v("那么神经网络也好还是卷积神经网络其实都是上个世纪就有的算法，只是近些年来电脑的计算能力已非当年的那种计算水平，同时现在的训练数据很多")]),v._v("，于是神经网络的相关算法又重新流行起来，因此卷积神经网络也一样流行。")]),v._v(" "),t("ul",[t("li",[v._v("1974年，Paul Werbos提出了误差反向传导来训练人工神经网络，使得训练多层神经网络成为可能。")]),v._v(" "),t("li",[t("strong",[v._v("1979年，Kunihiko Fukushima（福岛邦彦），提出了Neocognitron， 卷积、池化的概念基本形成。")])]),v._v(" "),t("li",[t("strong",[v._v("1986年，Geoffrey Hinton与人合著了一篇论文：Learning representations by back-propagation errors。")])]),v._v(" "),t("li",[v._v("1989年，Yann LeCun提出了一种用反向传导进行更新的卷积神经网络，称为LeNet。")]),v._v(" "),t("li",[v._v("1998年，Yann LeCun改进了原来的卷积网络，LeNet-5。")])]),v._v(" "),t("h3",{attrs:{id:"感受野"}},[v._v("感受野")]),v._v(" "),t("p",[v._v("1962年Hubel和Wiesel通过对"),t("strong",[v._v("猫视觉皮层细胞")]),v._v("的研究，提出了感受野(receptive field)的概念，Fukushima基于感受野概念提出的神经认知机(neocognitron)可以看作是卷积神经网络的第一个实现网络。")]),v._v(" "),t("p",[t("strong",[v._v("单个感受器与许多感觉神经纤维相联系，感觉信息是通过许多感受神经纤维发放总和性的空间与时间类型不同的冲动，相当于经过编码来传递。")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/%E8%8A%82%E7%BB%86%E8%83%9E%E6%84%9F%E5%8F%97%E9%87%8E%E6%A8%A1%E5%BC%8F%E5%9B%BE.png",alt:""}})]),v._v(" "),t("h2",{attrs:{id:"边缘检测"}},[v._v("边缘检测")]),v._v(" "),t("p",[v._v("**为了能够用更少的参数，检测出更多的信息，基于上面的感受野思想。**通常神经网络需要检测出物体最明显的垂直和水平边缘来区分物体。比如")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/%E5%9E%82%E7%9B%B4%E7%89%B9%E5%BE%81%E6%B0%B4%E5%B9%B3%E7%89%B9%E5%BE%81.png",alt:""}})]),v._v(" "),t("p",[v._v("看一个列子，一个 6×6的图像卷积与一个3×3的过滤器（Filter or kenel）进行"),t("strong",[v._v("卷积运算（符号为 * ），* 也可能是矩阵乘法所以通常特别指定是卷积的时候代表卷积意思。")])]),v._v(" "),t("ul",[t("li",[v._v("相当于将 Filter 放在Image 上，从左到右、从上到下地（默认一个像素）移动过整个Image，分别计算 ImageImage 被 Filter 盖住的部分与 Filter的逐元素乘积的和")])]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/%E5%8D%B7%E7%A7%AF%E8%BE%B9%E7%BC%98%E6%A3%80%E6%B5%8B.png",alt:""}})]),v._v(" "),t("p",[v._v("在这个6×6 的图像中，左边一半像素的值全是 10，右边一半像素的值全是 0，中间是一条非常明显的垂直边缘。这个图像与过滤器卷积的结果中，中间两列的值都是 30，两边两列的值都是 0，即检测到了原 6×66×6 图像中的垂直边缘。")]),v._v(" "),t("p",[v._v("注：虽然看上去非常粗，是因为我们的图像太小，只有5个像素长、宽，所以最终得到结果看到的是两个像素位置，如果在一个500 x 500的图当中，就是一个竖直的边缘了。")]),v._v(" "),t("p",[t("img",{attrs:{src:"/img/articial/%E8%BE%B9%E7%BC%98%E5%9B%BE%E7%A4%BA.png",alt:""}})]),v._v(" "),t("p",[v._v("随着深度学习的发展，我们需要检测更复杂的图像中的边缘，与其使用由人手工设计的过滤器，"),t("strong",[v._v("还可以将过滤器中的数值作为参数，通过反向传播来学习得到")]),v._v("。算法可以根据实际数据来选择合适的检测目标，无论是检测水平边缘、垂直边缘还是其他角度的边缘，并习得图像的低层特征。")])])},[],!1,null,null,null);_.default=r.exports}}]);