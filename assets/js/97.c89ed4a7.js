(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{370:function(r,e,o){"use strict";o.r(e);var t=o(10),n=Object(t.a)({},function(){var r=this,e=r.$createElement,o=r._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[o("h2",{attrs:{id:"docker-包括三个基本概念"}},[r._v("Docker 包括三个基本概念")]),r._v(" "),o("p",[r._v("镜像（Image）\n容器（Container）\n仓库（Repository）\n理解了这三个概念，就理解了 Docker 的整个生命周期。")]),r._v(" "),o("h2",{attrs:{id:"docker-引擎"}},[r._v("Docker 引擎")]),r._v(" "),o("p",[r._v("Docker 引擎是一个包含以下主要组件的客户端服务器应用程序。")]),r._v(" "),o("ul",[o("li",[r._v("一种服务器，它是一种称为守护进程并且长时间运行的程序。")]),r._v(" "),o("li",[r._v("REST API用于指定程序可以用来与守护进程通信的接口，并指示它做什么。")]),r._v(" "),o("li",[r._v("一个有命令行界面 (CLI) 工具的客户端。\n"),o("img",{attrs:{src:"/img/deploy/docker1.png",alt:"docker1"}})])]),r._v(" "),o("h2",{attrs:{id:"docker-系统架构"}},[r._v("Docker 系统架构")]),r._v(" "),o("p",[r._v("Docker 使用客户端-服务器 (C/S) 架构模式，使用远程 API 来管理和创建 Docker 容器。")]),r._v(" "),o("p",[r._v("Docker 容器通过 Docker 镜像来创建。")]),r._v(" "),o("p",[r._v("容器与镜像的关系类似于面向对象编程中的对象与类。")]),r._v(" "),o("p",[r._v("Docker\t面向对象\n容器\t对象\n镜像\t类\n"),o("img",{attrs:{src:"/img/deploy/docker2.png",alt:"docker1"}})]),r._v(" "),o("p",[r._v("标题\t说明\n镜像(Images)\tDocker 镜像是用于创建 Docker 容器的模板。\n容器(Container)\t容器是独立运行的一个或一组应用。\n客户端(Client)\tDocker 客户端通过命令行或者其他工具使用 Docker API ("),o("a",{attrs:{href:"https://docs.docker.com/develop/sdk/",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://docs.docker.com/reference/api/docker_remote_api"),o("OutboundLink")],1),r._v(") 与 Docker 的守护进程通信。\n主机(Host)\t一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。\n仓库(Registry)\tDocker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub("),o("a",{attrs:{href:"https://hub.docker.com",target:"_blank",rel:"noopener noreferrer"}},[r._v("https://hub.docker.com"),o("OutboundLink")],1),r._v(") 提供了庞大的镜像集合供使用。\nDocker Machine\tDocker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。")]),r._v(" "),o("h2",{attrs:{id:"docker-镜像"}},[r._v("Docker 镜像")]),r._v(" "),o("p",[r._v("我们都知道，操作系统分为内核和用户空间。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而 Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 "),o("code",[r._v("Ubuntu 16.04 ")]),r._v(" 最小系统的 root 文件系统。")]),r._v(" "),o("p",[r._v("Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像不包含任何动态数据，其内容在构建之后也不会被改变。")]),r._v(" "),o("h2",{attrs:{id:"分层存储"}},[r._v("分层存储")]),r._v(" "),o("p",[r._v("因为镜像包含操作系统完整的 root 文件系统，其体积往往是庞大的，因此在 Docker 设计时，就充分利用 "),o("a",{attrs:{href:"https://en.wikipedia.org/wiki/Union_mount",target:"_blank",rel:"noopener noreferrer"}},[r._v("Union FS"),o("OutboundLink")],1),r._v(" 的技术，将其设计为分层存储的架构。所以严格来说，镜像并非是像一个 ISO 那样的打包文件，镜像只是一个虚拟的概念，其实际体现并非由一个文件组成，而是由一组文件系统组成，或者说，由多层文件系统联合组成。")]),r._v(" "),o("p",[r._v("镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。")]),r._v(" "),o("p",[r._v("分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。")]),r._v(" "),o("p",[r._v("关于镜像构建，将会在后续相关章节中做进一步的讲解。")]),r._v(" "),o("h2",{attrs:{id:"docker-容器"}},[r._v("Docker 容器")]),r._v(" "),o("p",[r._v("镜像（"),o("code",[r._v("Image")]),r._v("）和容器（"),o("code",[r._v("Container")]),r._v("）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。")]),r._v(" "),o("p",[r._v("容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。因此容器可以拥有自己的 root 文件系统、自己的网络配置、自己的进程空间，甚至自己的用户 ID 空间。容器内的进程是运行在一个隔离的环境里，使用起来，就好像是在一个独立于宿主的系统下操作一样。这种特性使得容器封装的应用比直接在宿主运行更加安全。也因为这种隔离的特性，很多人初学 Docker 时常常会混淆容器和虚拟机。")]),r._v(" "),o("p",[r._v("前面讲过镜像使用的是分层存储，容器也是如此。每一个容器运行时，是以镜像为基础层，在其上创建一个当前容器的存储层，我们可以称这个为容器运行时读写而准备的存储层为容器存储层。")]),r._v(" "),o("p",[r._v("容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。")]),r._v(" "),o("p",[r._v("按照 Docker 最佳实践的要求，容器不应该向其存储层内写入任何数据，容器存储层要保持无状态化。所有的文件写入操作，都应该使用 "),o("code",[r._v("数据卷（Volume）")]),r._v("、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网络存储）发生读写，其性能和稳定性更高。")]),r._v(" "),o("p",[r._v("数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器删除或者重新运行之后，数据却不会丢失。")]),r._v(" "),o("h2",{attrs:{id:"docker-仓库"}},[r._v("Docker 仓库")]),r._v(" "),o("p",[r._v("镜像构建完成后，可以很容易的在当前宿主机上运行，但是，如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry 就是这样的服务。")]),r._v(" "),o("p",[r._v("一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。")]),r._v(" "),o("p",[r._v("通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <仓库名>:<标签> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。")]),r._v(" "),o("p",[r._v("以 Ubuntu 镜像 为例，ubuntu 是仓库的名字，其内包含有不同的版本标签，如，14.04, 16.04。我们可以通过 ubuntu:14.04，或者 ubuntu:16.04 来具体指定所需哪个版本的镜像。如果忽略了标签，比如 ubuntu，那将视为 ubuntu:latest。")]),r._v(" "),o("p",[r._v("仓库名经常以 两段式路径 形式出现，比如 jwilder/nginx-proxy，前者往往意味着 Docker Registry 多用户环境下的用户名，后者则往往是对应的软件名。但这并非绝对，取决于所使用的具体 Docker Registry 的软件或服务。")]),r._v(" "),o("h3",{attrs:{id:"公有-docker-registry"}},[r._v("公有 Docker Registry")]),r._v(" "),o("p",[r._v("Docker Registry 公开服务是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。")]),r._v(" "),o("p",[r._v("最常使用的 Registry 公开服务是官方的 "),o("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Docker Hub"),o("OutboundLink")],1),r._v("，这也是默认的 Registry，并拥有大量的高质量的官方镜像。除此以外，还有 "),o("a",{attrs:{href:"https://coreos.com/",target:"_blank",rel:"noopener noreferrer"}},[r._v("CoreOS"),o("OutboundLink")],1),r._v(" 的 "),o("a",{attrs:{href:"https://quay.io/repository/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Quay.io"),o("OutboundLink")],1),r._v("，CoreOS 相关的镜像存储在这里；Google 的 Google "),o("a",{attrs:{href:"https://cloud.google.com/container-registry/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Container Registry"),o("OutboundLink")],1),r._v("，"),o("a",{attrs:{href:"https://kubernetes.io/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Kubernetes"),o("OutboundLink")],1),r._v(" 的镜像使用的就是这个服务。")]),r._v(" "),o("p",[r._v("由于某些原因，在国内访问这些服务可能会比较慢。国内的一些云服务商提供了针对 Docker Hub 的镜像服务（Registry Mirror），这些镜像服务被称为加速器。常见的有 "),o("a",{attrs:{href:"https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fcr.console.aliyun.com%2F#/accelerator",target:"_blank",rel:"noopener noreferrer"}},[r._v("阿里云加速器"),o("OutboundLink")],1),r._v("、"),o("a",{attrs:{href:"https://www.daocloud.io/mirror#accelerator-doc",target:"_blank",rel:"noopener noreferrer"}},[r._v("DaoCloud加速器"),o("OutboundLink")],1),r._v(" 等。使用加速器会直接从国内的地址下载 Docker Hub 的镜像，比直接从 Docker Hub 下载速度会提高很多。")]),r._v(" "),o("p",[r._v("国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 "),o("a",{attrs:{href:"https://hub.tenxcloud.com/",target:"_blank",rel:"noopener noreferrer"}},[r._v("时速云镜像仓库"),o("OutboundLink")],1),r._v("、"),o("a",{attrs:{href:"https://id.163yun.com/login?h=fc&referrer=https%3a%2f%2fc.163yun.com%2flogin%2fcallback%3fredirect%3d#/m/library/",target:"_blank",rel:"noopener noreferrer"}},[r._v("网易云镜像服务"),o("OutboundLink")],1),r._v("、"),o("a",{attrs:{href:"https://hub.daocloud.io/",target:"_blank",rel:"noopener noreferrer"}},[r._v("DaoCloud 镜像市场"),o("OutboundLink")],1),r._v("、"),o("a",{attrs:{href:"https://account.aliyun.com/login/login.htm?oauth_callback=https%3A%2F%2Fcr.console.aliyun.com%2F",target:"_blank",rel:"noopener noreferrer"}},[r._v("阿里云镜像库"),o("OutboundLink")],1),r._v(" 等。")]),r._v(" "),o("h3",{attrs:{id:"私有-docker-registry"}},[r._v("私有 Docker Registry")]),r._v(" "),o("p",[r._v("除了使用公开服务外，用户还可以在本地搭建私有 Docker Registry。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。")]),r._v(" "),o("p",[r._v("开源的 Docker Registry 镜像只提供了 Docker Registry API 的服务端实现，足以支持 docker 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。在官方的商业化版本 "),o("a",{attrs:{href:"https://docs.docker.com/datacenter/dtr/2.0/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Docker Trusted Registry"),o("OutboundLink")],1),r._v(" 中，提供了这些高级功能。")]),r._v(" "),o("p",[r._v("除了官方的 Docker Registry 外，还有第三方软件实现了"),o("a",{attrs:{href:"https://docs.docker.com/registry/spec/api/",target:"_blank",rel:"noopener noreferrer"}},[r._v(" Docker Registry API"),o("OutboundLink")],1),r._v("，甚至提供了用户界面以及一些高级功能。比如，"),o("a",{attrs:{href:"https://github.com/goharbor/harbor",target:"_blank",rel:"noopener noreferrer"}},[r._v("VMWare Harbor"),o("OutboundLink")],1),r._v(" 和 "),o("a",{attrs:{href:"https://www.sonatype.com/nexus-repository-sonatype",target:"_blank",rel:"noopener noreferrer"}},[r._v("Sonatype Nexus"),o("OutboundLink")],1),r._v("。")])])},[],!1,null,null,null);e.default=n.exports}}]);