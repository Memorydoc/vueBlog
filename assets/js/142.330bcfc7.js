(window.webpackJsonp=window.webpackJsonp||[]).push([[142],{415:function(t,a,s){"use strict";s.r(a);var n=s(10),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("不使用官方的语言，针对demo 进行自己的理解")])]),t._v(" "),s("ol",[s("li",[t._v("Propagation.REQUIRED")])]),t._v(" "),s("blockquote",[s("p",[t._v("默认的传播机制， 只要当前有事务就用当前的事务，如果没有事务，则创建新事务")])]),t._v(" "),s("p",[t._v("只要是在自己服务中的 service实现的方法， 都会进行回滚， 只需要在顶层调用就接口声明 @Transactional 注解即可")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数据回滚")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LiveCropVideo")]),t._v(" liveCropVideo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LiveCropVideo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      liveCropVideo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLiveNo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"测试liveNo front"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      liveCropVideoMapper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertSelective")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("liveCropVideo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//该方法是在同一个JVM中， 虽然是dubbo服务，但是实现类在当前服务中， test 实现类执行的数据会发生回滚")]),t._v("\n      liveCropVideoService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"异常"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br")])]),s("p",[t._v("2.Propagation.NOT_SUPPORTED")]),t._v(" "),s("blockquote",[s("p",[t._v("该注解可以让当前方法 事务无效，也就是说，如果你在被调用的方法上 注解了@Transactional，但是当前方法\n使用了    @Transactional(propagation=Propagation.NOT_SUPPORTED),那么当前方法就不会受到外层的事务影响")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当前方法不受调用方 事务的影响，让自己强制无事务")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propagation"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Propagation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NOT_SUPPORTED"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LiveCropVideo")]),t._v(" liveCropVideo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LiveCropVideo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        liveCropVideo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLiveNo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"测试liveNo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        liveCropVideoMapper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertSelective")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("liveCropVideo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"测试事务"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 即使是异常，也不会数据回滚")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("ol",{attrs:{start:"3"}},[s("li",[t._v("Propagation.REQUIRES_NEW")])]),t._v(" "),s("blockquote",[s("p",[t._v("创建一个新的事务， 老的事务挂起，当自己的事务执行完成之后，才会继续执行老的事务，这里时候的老的事务，其实\n就是调用方开启的事务, 即使调用方使用的是 Propagation.NOT_SUPPORTED  传播机制，也仍然会回滚数据")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propagation"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Propagation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("REQUIRES_NEW"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LiveCropVideo")]),t._v(" liveCropVideo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LiveCropVideo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        liveCropVideo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLiveNo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"测试liveNo"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        liveCropVideoMapper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertSelective")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("liveCropVideo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"啛啛喳喳错"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br")])]),s("p",[t._v("4.Propagation.MANDATORY")]),t._v(" "),s("blockquote",[s("p",[t._v("必须在一个已有的事务中执行，否则报错")])]),t._v(" "),s("p",[t._v("调用方  使用了非事务 propagation=Propagation.NOT_SUPPORTED")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transactional")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propagation"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Propagation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("NOT_SUPPORTED"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LiveCropVideo")]),t._v(" liveCropVideo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LiveCropVideo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        liveCropVideo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setLiveNo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"测试liveNo front"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        liveCropVideoMapper"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("insertSelective")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("liveCropVideo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//该方法是在同一个JVM中， 虽然是dubbo服务，但是实现类在当前服务中， test 实现类执行的数据会发生回滚")]),t._v("\n        liveCropVideoService"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RuntimeException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"异常"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br")])]),s("p",[t._v("自己使用了 Propagation.MANDATORY 则会抛出异常")]),t._v(" "),s("div",{staticClass:"language-sh line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("org.springframework.transaction.IllegalTransactionStateException: No existing transaction found "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" transaction marked with propagation "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mandatory'")]),t._v("\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("AbstractPlatformTransactionManager.java:363"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TransactionAspectSupport.java:461"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TransactionAspectSupport.java:277"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TransactionInterceptor.java:96"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ReflectiveMethodInvocation.java:179"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ExposeInvocationInterceptor.java:92"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ReflectiveMethodInvocation.java:179"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("JdkDynamicAopProxy.java:213"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat com.sun.proxy."),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$Proxy126")]),t._v(".test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Unknown Source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat com.sprucetec.live.service.impl.LiveVideoThreeServiceImpl.test"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("LiveVideoThreeServiceImpl.java:442"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Native Method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat sun.reflect.NativeMethodAccessorImpl.invoke"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("NativeMethodAccessorImpl.java:62"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DelegatingMethodAccessorImpl.java:43"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tat java.lang.reflect.Method.invoke"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Method.java:498"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("div",{staticClass:"warning custom-block"},[s("p",{staticClass:"custom-block-title"},[t._v("说明")]),t._v(" "),s("p",[t._v("Propagation.MANDATORY 传播机制要求当前必须在事务环境中，如果调用方没有事务，那么会抛出异常")])]),t._v(" "),s("p",[t._v("5.Propagation.NEVER\n和上面的 Propagation.MANDATORY 恰恰相反，该传播机制要求必须调用方，必须不在事务中，否则抛出异常")]),t._v(" "),s("p",[t._v("6.Propagation.SUPPORTS")]),t._v(" "),s("blockquote",[s("p",[t._v("如果其他bean调用这个方法时，其他bean声明了事务，则就用这个事务，如果没有声明事务，那就不用事务")])]),t._v(" "),s("p",[t._v("7.Propagation.NESTED")]),t._v(" "),s("blockquote",[s("p",[t._v("如果当前存在事务，则在嵌套的事务中执行（也就是调用方开启的事务），如果调用方没有开启事务， 也就是根本没有\n@Transactional 注解，结果为： 也会回滚数据， 就算调用方使用@Transactional(propagation = Propagation.NOT_SUPPORTED)\n结果还是: 回滚数据")])]),t._v(" "),s("h2",{attrs:{id:"简单理解-脏读-、不可重复读、-幻度"}},[t._v("简单理解 脏读 、不可重复读、 幻度")]),t._v(" "),s("ul",[s("li",[t._v("脏读 ： 读到了别的事务 想要修改成的数据，单最终没有修改成功， 发生回滚了\n也就是说， 我读一条数据， 读到之后， 别人把这个数据改了，我又读到了，但是别人改了之后 程序发生异常了，\n回滚掉了，那么我又堵了，发现数据还和以前一样啊，但是中间怎么变化了呢？ 这个过程就是脏读")]),t._v(" "),s("li",[t._v("不可重复读： 概念很容易和脏读混淆，最大的区别就是， 脏读是别人改我读到的数据，但是没有修改成功，\n不可重复读是别人修改成功了。")]),t._v(" "),s("li",[t._v("幻度： 幻度是针对数据的 新增， 我读一部分数据，第一次读到了10条，后面别人往我搜索条件能查询出来的数据中添加了5\n条，然后我再读取的时候，发现是15条，这就产生了幻度")])]),t._v(" "),s("h3",{attrs:{id:"事务隔离级别"}},[t._v("事务隔离级别")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("读未提交（read uncommitted）：就是我可以读到别人未提交的数据，别人也可以读到我未提交的数据")])]),t._v(" "),s("li",[s("p",[t._v("读已提交（read committed）： 我和别人都只能相互读到别人已经提交的数据，如果数据没有提交，那么不能读到\n可以避免脏读和不可重复读")])]),t._v(" "),s("li",[s("p",[t._v("可重复读（repeatable read） ： innoDB 默认的隔离级别\n不管别人怎么操作我读到的数据，就算对我读到事务中的数据进行了修改，并且进行了提交， 只要我自己的事务没有提交 或者没有\n回滚（其实就是事务结束）， 那么我在自己的事务中永远读到的数据都是最开始读取的数据，并不会收别人修改、新增、删除等操作的影响\n。 可以避免脏读和不可重复读， 但是还是不能避免幻读，以为幻读是针对新增而产生的")])]),t._v(" "),s("li",[s("p",[t._v("序列化（serializable）\n事务顺序执行，可以避免脏读、不可重复读、幻读 但是效率太差了，一般不会采用，在读写数据时， 是数据进行加锁，在没有获取到锁的前提\n下，是不能对数据进行任何修改删除操作的")])])])])},[],!1,null,null,null);a.default=e.exports}}]);